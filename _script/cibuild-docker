#!/usr/bin/env bash

set -exuo pipefail
cd $(dirname $0)/..

# Usage info
function show_help() {
cat << EOF
Usage: ${0##*/} [-hvdr]

Simulate a travis build against this repository

    -h          display this help and exit
    -d          Simulate a (build plus) deploy. As a merge to master is doing
    -r          Simulate a (build plus) deploy, but do not release new binaries publicly (dry run)

EOF
}

function arguments_mgmt() {
    sim_deploy="no"
    dry_run=""
    OPTIND=1
    while getopts ":hdr" opt; do
        case "$opt" in
            h )
                show_help
                exit 0
                ;;
            d )
                sim_deploy="yes"
                ;;
            r )
                sim_deploy="yes"
                dry_run="true"
                ;;
            '?' )
                show_help >&2
                exit 1
                ;;
        esac
    done
    shift "$((OPTIND-1))"
}

function activate_deploy_flags() {
    echo "INFO: deploy flag enabled. We will activate the env variables, and mount your docker config/credentials,"\
         "to simulate a travis merge to master"
    local_docker_config_store="${HOME}/.docker"
    if ! $(test -f "${local_docker_config_store}/config.json")
    then
        echo "ERROR: You need a valid docker config credentials file in your ${local_docker_config_store} directory"\
             "in order to deploy new images, with read access to the user ${travis_user} (uid 2000 in the container)."\
             "You can generate it using docker login"
        exit 1
    fi
    deploy_flags="-v ${local_docker_config_store}:${travis_home}/.docker -e TRAVIS_PULL_REQUEST=false -e TRAVIS_BRANCH=master"
}

function docker_run_cmdline_generator() {
    script_name=$(echo $(basename $0) | cut -d "-" -f 1)
    # https://docs.travis-ci.com/user/common-build-problems/#Troubleshooting-Locally-in-a-Docker-Image
    test_docker_image="travisci/ci-garnet:packer-1515445631-7dfb2e1"
    travis_user="travis"
    travis_home="/home/${travis_user}"
    if $(test "$sim_deploy" = "yes")
    then
        activate_deploy_flags
    else
        deploy_flags=""
    fi
    docker_mounted_project="${travis_home}/gopath/src/github.com/dachad/tcpgoon"
    http_proxy="${http_proxy:-}"
    cmdline="docker run -t -i \
            -v $PWD:$docker_mounted_project \
            -w $docker_mounted_project \
            --user $travis_user
            -e http_proxy=$http_proxy \
            $deploy_flags \
            -e COVERALLS_TOKEN=$COVERALLS_TOKEN
            --privileged \
            --rm \
            $test_docker_image \
            /bin/bash --login -c \"_script/$script_name $dry_run \""
}

# main()
arguments_mgmt "$@"
docker_run_cmdline_generator

echo "DEBUG: executing $cmdline"
eval $cmdline
